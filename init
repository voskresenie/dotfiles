#!/usr/bin/env zsh
# Usage:
# * TODO - install packages
# * TODO - update packages
# * symlinks - create symlinks for conf files
# * TODO - set up hosts file
# * TODO - set up NFS connection in fstab file

install () {
  echo "install not implemented" >&2

  # install vundle
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  vim +BundleInstall +q +q
}

update () {
  echo "update not implemented" >&2

  # update packages
  sudo pacman -Syyu
  # TODO: add restore to previous date in case of bad upgrade
  # https://wiki.archlinux.org/title/Arch_Linux_Archive#How_to_restore_all_packages_to_a_specific_date

  # update vundle
  vim +BundleUpdate +q +q
}

downgrade () {
  # TODO: read from input
  date="2022-01-01"

  sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
  mirrorlistcmd="echo \"Server=https://archive.archlinux.org/repos/$(print -r -- ${date//-/\/})/\\\$repo/os/\\\$arch\" > /etc/pacman.d/mirrorlist"
  sudo sh -c $mirrorlistcmd
  yes | pacman -Syyuu

  sudo mv /etc/pacman.d/mirrorlist.backup /etc/pacman.d/mirrorlist
}

symlinks() {
  # Always include `local OPTIND` in any function that uses `getopts` otherwise
  #   all `getopts` share a single global OPTIND
  # https://stackoverflow.com/questions/63661198/zsh-getopts-optind-behavior-not-consistent-with-other-shells-bash-sh
  local OPTIND opt
  while getopts ":i:o:f" opt; do
    case $opt in
      i) srcdir="$OPTARG" ;;
      o) dstdir="$OPTARG" ;;
      f) force=true ;;
      \?) invalid=true
        echo "Invalid option -$OPTARG" >&2
    esac
  done
  if [ "$invalid" ]; then
    exit 1
  fi

  # how to find symlinks referencing source:
  # $ find /home/ -type l -exec readlink -nf {} ';' -exec echo " -> {}" ';' | grep "/dir2"
  SYMS=(
        #dwb/
        #dwb/searchengines
        #dwb/settings
        #dwm/
        #dwm/dwm-diff.sh
        #dwm/dwm-grid-6.1.diff
        #dwm/dwm-svarog-6.1.diff
        #dwm/PKGBUILD
        #firefox/
        #firefox/chrome/
        #firefox/chrome/userChrome.css
        #firefox/chrome/userContent.css

        # TODO: add support for * operator

        "dunstrc:.config/dunst/dunstrc"
        ".fehbg:.fehbg"
        # "fonts.conf:.config/fontconfig/fonts.conf"
        "htoprc:.config/htop/htoprc"
        ".inputrc:.inputrc"
        "mpv.conf:.config/mpv/mpv.conf"
        "ncmpcpp:.ncmpcpp"
        ".pam_environment:.pam_environment"
        ".tmux.conf:.tmux.conf"
        ".vimrc:.vimrc"
        ".xbindkeysrc:.xbindkeysrc"
        ".xinitrc:.xinitrc"
        "xres:.xres"
        ".Xresources:.Xresources"
        ".zprofile:.zprofile"
        ".zshrc:.zshrc"
      )

  print "Linking files..."
  if [ "$force" ]; then
    print "Overwriting existing files..."
  fi

  for sym in "${SYMS[@]}" ; do
    SRC=$srcdir/${sym%%:*}
    DST=$dstdir/${sym#*:}
    printf "  %s -> %s" "$SRC" "$DST"

    if [ "$force" ]; then
      # remove symlink if exists
      [ -h $DST ] &&
        ( rm $DST &&
          printf " : Removed existing symlink" ||
          printf " : Could not remove existing symlink")
      # remove file if exists
      [ -f $DST ] &&
        ( rm $DST &&
          printf " : Removed existing file" ||
          printf " : Could not remove existing file")
      # remove directory if exists and empty
      [ -d $DST ] &&
        ( rmdir $DST &&
          printf " : Removed existing directory" ||
          printf " : Could not remove existing directory" )
    fi

    ( [ -h $DST ] && printf " : Destination symlink exists" ) ||
      ( [ -f $DST ] && printf " : Destination file exists" ) ||
      ( [ -d $DST ] && printf " : Destination directory exists" ) &&
      print " : Skipping" && continue

    mkdir -p $(dirname $DST)
    ln -s $SRC $DST 2>/dev/null &&
      print " : Success" ||
      print " : Cannot create symbolic link"
  done

  print "Done"
}

hosts() {
  echo "hosts not implemented" >&2
}

fstab() {
  echo "fstab not implemented" >&2
}

# args=()
# opts=()
# while [ $OPTIND -le "$#" ]; do
#   if getopts b: opt; then
#     case $opt in
#       b) opts+=("$OPTARG");;
#     esac
#   else
#     args+=("${(P)OPTIND}")
#     # args+=("${!OPTIND}") -- bash
#     ((OPTIND++))
#   fi
# done
#
# echo "${args[@]}"
# echo "${opts[@]}"

readonly cmd=${1:?"The command must be specified."}
case $cmd in
  install) install "${@:2}" ;;
  upgrade) upgrade "${@:2}" ;;
  downgrade) downgrade "${@:2}" ;;
  symlinks) symlinks -i ~/dotfiles -o ~/dotfiles/tmp "${@:2}" ;;
  hosts) hosts "${@:2}" ;;
  fstab) fstab "${@:2}" ;;
  *) echo "Invalid command $cmd" >&2
    exit 1
esac
