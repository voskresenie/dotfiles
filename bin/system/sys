#!/usr/bin/env zsh
#
# /usr/local/bin/sys
#
# This script initializes and maintains a system in a standardized format
#
# Usage:
# * init - initial setup
# * TODO - install packages
# * TODO - update packages
# * files - copy or symlink managed files
# * TODO - set up hosts file
# * TODO - set up NFS connection in fstab file
#
# TODO: this is apparently bad for some reason, fix it
# http://mywiki.wooledge.org/BashFAQ/028
pkgname=voskarch
script_name="$(basename $0)"
script_dir="$(dirname "$(realpath "$0")")"
repo_dir="$(realpath "$script_dir/../..")"
source "$repo_dir"/cfg/system/zsh/zshenv
source "$repo_dir"/cfg/system/zsh/zprofile

source "$repo_dir"/cfg/user/colors/env
PREFIX="$BLUE::$RESET"

# these should already be set by one of the profile files, but might be worth
# keeping around anyway just in case
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

config_dir="$XDG_CONFIG_HOME/$pkgname"
state_dir="$XDG_STATE_HOME/$pkgname"
data_dir="$XDG_DATA_HOME/$pkgname"

# directory for backing up files before overwriting
file_backup_dir="$state_dir/files/backup"
# file for keeping track of files managed by script
file_state="$state_dir/files/managed"

# list of files `src:dst` (potentially) managed by script
# TODO: add support for destination being a directory rather than filename
# TODO: add support for * operator
system_bins=(
             "bin/system/ensure:/usr/local/bin/ensure"
             "bin/system/listop:/usr/local/bin/listop"
             "bin/system/sys:/usr/local/bin/sys"
           )

system_cfgs=(
             "cfg/system/pacman.conf:/etc/pacman.conf"
             "cfg/system/profile.d/user.sh:/etc/profile.d/user.sh"
             "cfg/system/sysctl.d/disable_ipv6.conf:/etc/sysctl.d/disable_ipv6.conf"
             "cfg/system/zsh/zlogout:/etc/zsh/zlogout"
             "cfg/system/zsh/zprofile:/etc/zsh/zprofile"
             "cfg/system/zsh/zshenv:/etc/zsh/zshenv"
             "cfg/system/zsh/zshrc:/etc/zsh/zshrc"
           )

user_bins=(
           "bin/user/xstat:$HOME/bin/xstat"
         )

user_cfgs=(
           "cfg/user/colors/env:$ZDOTDIR/colorsenv"
           "cfg/user/dunstrc:$XDG_CONFIG_HOME/dunst/dunstrc"
           "cfg/user/fehbg:$XDG_CONFIG_HOME/fehbg"
           "cfg/user/git/config:$XDG_CONFIG_HOME/git/config"
           "cfg/user/htoprc:$XDG_CONFIG_HOME/htop/htoprc"
           "cfg/user/inputrc:$HOME/.inputrc"                                       # TODO: make xdg-compliant
           "cfg/user/mpd.conf:$XDG_CONFIG_HOME/mpd/mpd.conf"
           "cfg/user/mpv.conf:$XDG_CONFIG_HOME/mpv/mpv.conf"
           "cfg/user/ncmpcpp/bindings:$XDG_CONFIG_HOME/ncmpcpp/bindings"
           "cfg/user/ncmpcpp/config:$XDG_CONFIG_HOME/ncmpcpp/config"
           "cfg/user/ncmpcpp/patterns.list:$XDG_CONFIG_HOME/ncmpcpp/patterns.list"
           "cfg/user/profile:$HOME/.profile"                                       # TODO: make xdg-compliant
           "cfg/user/redshift.conf:$XDG_CONFIG_HOME/redshift.conf"
           "cfg/user/tmux.conf:$XDG_CONFIG_HOME/tmux/tmux.conf"
           "cfg/user/vim/vimrc:$XDG_CONFIG_HOME/vim/vimrc"
           "cfg/user/vim/colors.vim:$XDG_CONFIG_HOME/vim/colors/voskarch.vim"
           "cfg/user/vim/colors.airline.vim:$XDG_CONFIG_HOME/vim/autoload/airline/themes/voskarch.vim"
           "cfg/user/nvim/init.vim:$XDG_CONFIG_HOME/nvim/init.vim"
           "cfg/user/X11/colorsdark:$XDG_CONFIG_HOME/X11/colorsdark"
           "cfg/user/X11/urxvt:$XDG_CONFIG_HOME/X11/urxvt"
           "cfg/user/X11/xbindkeysrc:$HOME/.xbindkeysrc"                           # TODO: make xdg-compliant
           "cfg/user/X11/xinitrc:$HOME/.xinitrc"                                   # TODO: make xdg-compliant
           "cfg/user/X11/xresources:$XDG_CONFIG_HOME/X11/xresources"
           "cfg/user/zsh/zlogin:$ZDOTDIR/.zlogin"                                  # TODO: see if it's possible to remove preceding dot
           "cfg/user/zsh/zlogout:$ZDOTDIR/.zlogout"                                # TODO: see if it's possible to remove preceding dot
           "cfg/user/zsh/zprofile:$ZDOTDIR/.zprofile"                              # TODO: see if it's possible to remove preceding dot
           "cfg/user/zsh/zshenv:$ZDOTDIR/.zshenv"                                  # TODO: see if it's possible to remove preceding dot
           "cfg/user/zsh/zshrc:$ZDOTDIR/.zshrc"                                    # TODO: see if it's possible to remove preceding dot

           #cfg/user/"fonts.conf:$XDG_CONFIG_HOME/fontconfig/fonts.conf"
           #dwb/
           #dwb/searchengines
           #dwb/settings
           #dwm/
           #dwm/dwm-diff.sh
           #dwm/dwm-grid-6.1.diff
           #dwm/dwm-svarog-6.1.diff
           #dwm/PKGBUILD
           #firefox/
           #firefox/chrome/
           #firefox/chrome/userChrome.css
           #firefox/chrome/userContent.css
         )
# intel gpu-specific cfgs
intel_gpu_cfgs=(
                "cfg/system/xorg.conf.d/20-intel-gpu.conf:/etc/X11/xorg.conf.d/20-intel-gpu.conf"
              )

system=( "${system_bins[@]}" "${system_cfgs[@]}" )
user=( "${user_bins[@]}" "${user_cfgs[@]}" )
bins=( "${system_bins[@]}" "${user_bins[@]}" )
cfgs=( "${system_cfgs[@]}" "${user_cfgs[@]}" )

prereq () {
  mkdir -p "$file_backup_dir"

  mkdir -p "$XDG_DESKTOP_DIR" \
    "$XDG_DOWNLOAD_DIR" \
    "$XDG_TEMPLATES_DIR" \
    "$XDG_PUBLICSHARE_DIR" \
    "$XDG_DOCUMENTS_DIR" \
    "$XDG_MUSIC_DIR" \
    "$XDG_PICTURES_DIR" \
    "$XDG_VIDEOS_DIR"
}

init () {
  readonly local hostname=${1:?"The hostname must be specified."}
  readonly local package_groups="${@:2}"
  local cfg="$(mktemp)"

  if [ "$repo_dir" != "$(realpath -m "$data_dir")" ]; then
    while true; do
      printf "$PREFIX repo located at $repo_dir; move to $data_dir? [y]es [N]o "
      read yn
      case $yn in
        [Yy]|Yes|yes )
          mkdir -p "$XDG_DATA_HOME"
          cp -r "$repo_dir" "$data_dir"
          cd "$data_dir"
          rm -rf "$repo_dir"
          repo_dir="$data_dir"
          print "$PREFIX new repo location: $repo_dir"
          break ;;
        [Nn]|No|no|"" ) break ;;
        * ) ;;
      esac
    done
  fi

  print $hostname > $cfg

  # TODO: back up existing cfg first
  mv $cfg $config_dir/system
}

__system () {
  readonly local usage='TODO'

  local OPTIND opt
  local args=() files_opts update_opts
  while [ $OPTIND -le "$#" ]; do
    if getopts :fhpqv opt; then
      case $opt in
        f) files_opts+=$opt ;;
        h) print "Usage: $usage" && exit ;;
        p) files_opts+=$opt ;;
        q) update_opts+=$opt ;;
        v) files_opts+=$opt
          update_opts+=$opt
          ;;
        \?) echo "Invalid option -$opt\nUsage: $usage" >&2 && exit 1 ;;
      esac
    elif [ -n "${(P)OPTIND}" ]; then
      [ -z "$hostname" ] && hostname="${(P)OPTIND}" || { echo "Invalid argument: ${(P)OPTIND}" >&2 && exit 1 }
      ((OPTIND++))
    fi
  done
  [ -z "$hostname" ] && echo "Missing hostname" >&2 && exit 1

  # TODO: init $hostname
  declare -A host_file_groups
  host_file_groups=(
                    #hretha       'system_bins -x system_cfgs user_bins user_cfgs'
                    hretha       'system_bins':'-x system_cfgs':'user_bins user_cfgs'
                    svarog       'system_bins':'-x system_cfgs':'user_bins user_cfgs'
                    valhalla     'system_bins':'-x system_cfgs':'user_bins user_cfgs'
                  )
  local file_groups=(${(s[:])host_file_groups[$hostname]})
  for file_group in "$file_groups[@]"; do
    file_group=(${(s[ ])file_group})
    print "$PREFIX $script_name files $file_group"
    files $file_group[@] ${files_opts:+-$files_opts}
  done

  #update ${update_opts:+-$update_opts}
}

install () {
  echo "$script_name $0 not implemented" >&2

  sudo pacman -Syyu
  pkgs=(pkgfile nano)
  sudo pacman -S "$pkgs[@]"
  abs

  # install vundle
  if [ ! -d "$XDG_DATA_HOME"/vim/bundle/Vundle.vim ]; then
    git clone https://github.com/VundleVim/Vundle.vim.git "$XDG_DATA_HOME"/vim/bundle/Vundle.vim
    vim +BundleInstall +q +q
  fi
  # powerline font
  # TODO: add installation of custom font pkg (pkgs/otf-powerline-symbols)
  # for reference: how this was originally done, in case package doesn't work
  # wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
  # wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf
  # mv PowerlineSymbols.otf ~/.local/share/fonts/
  # fc-cache -vf ~/.local/share/fonts/
  # mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
}

# abs installs new packages and upgrades existing packages
abs () {
  mkdir -p $HOME/abs
  pkgs=(package-query)
  for pkg in "$pkgs[@]"; do
    cd $HOME/abs
    [ ! -d "$pkg" ] && git clone https://aur.archlinux.org/"$pkg".git
    cd "$pkg"

    # skip if up to date
    [ $(git pull --dry-run | wc -l) -eq 0 ] && continue

    git pull
    less PKGBUILD
    while true; do
      printf "$PREFIX Build package $pkg? [y]es [n]o [V]iew "
      read yn
      case $yn in
        [Yy]|Yes|yes )
          break ;;
        [Nn]|No|no|"" )
          print "$PREFIX Skipping..."
          continue 2 ;;
        [Vv]|View|view )
          less PKGBUILD ;;
        * ) ;;
      esac
    done
    # there should be a better way to do this, so that the package isn't rebuilt
    # if src hasn't changed, but I'm too lazy to figure it out right now.
    makepkg -isc
    git clean -fd
  done
}

# runs before update to save current state
backup () {
  # record last update date
  grep upgrade /var/log/pacman.log | tail -1 | cut -c 2-11 > "$state_dir"/last_update
}

orphan-deps () {
  readonly local usage='TODO'
  local OPTIND opt
  local quiet=false verbose=false
  while getopts ":hqv" opt; do
    case $opt in
      h) print "Usage: $usage" && exit ;;
      q) quiet=true ;;
      v) verbose=true ;;
      \?) echo "Invalid option -$opt\nUsage: $usage" >&2 && exit 1 ;;
    esac
  done

  local orphs=$(pacman -Qtdq | wc -l)
  [ ! "$quiet" = true ] && [ "$orphs" -eq 0 ] && print " no orphaned dependencies"
  [ "$orphs" -ne 0 ] && warn "$orphs orphaned dependencies"
  [ "$verbose" = true ] && pacman -Qtdq
  return 0
}

update () {
  readonly local usage='TODO'
  local OPTIND opt
  local quiet=false verbose=false
  while getopts ":hqv" opt; do
    case $opt in
      h) print "Usage: $usage" && exit ;;
      q) quiet=true ;;
      v) verbose=true ;;
      \?) echo "Invalid option -$opt\nUsage: $usage" >&2 && exit 1 ;;
    esac
  done

  # "description:normal command:[quiet command]:[verbose command]"
  local cmds=(
              'Updating package database:sudo pacman -Sy::'
              #'Updating package keys:sudo pacman-key --refresh-keys::'
              #'Updating package keys:sudo pacman-key --updatedb::'
              'Updating package keys:sudo pacman -S archlinux-keyring:yes | sudo pacman --color always -S archlinux-keyring 1>/dev/null:'
              "Updating packages:sudo pacman -Su:yes | sudo pacman --color always -Su $( [ "$verbose" = true ] || echo "1>/dev/null 2>/dev/null"):"
              'Updating package search:sudo pacman -Fy::' # possibly redundant with -Sy
              'Checking for orphaned dependencies:orphan-deps:orphan-deps -q:orphan-deps -v'
              'Updating abs:abs:false:'
              'Updating pkgfile:sudo pkgfile -u 1>/dev/null::'
              'Updating mlocate db:sudo updatedb::'
              'Updating vundle:nvim +BundleUpdate +q +q::'
              'Syncing hwclock with ntpd:__out=$(sudo ntpd -qg) && sudo hwclock --systohc && print $__out | tail -n 1::sudo ntpd -qg 1>/dev/null && sudo hwclock --systohc'
              # swap escape seems to get messed up sometimes after update, consider running it here
              )
  for (( i=1 ; i<=${#cmds[@]} ; i++ )); do
    local parts=("${(@s[:])cmds[$i]}")
    local desc="$parts[1]"
    local cmd="$parts[2]"
    if [ "$quiet" = true ]; then
      [ "$parts[3]" = false ] && print "$PREFIX $desc -- skipping in quiet mode" && continue
      [ -n "$parts[3]" ] && cmd="$parts[3]" || cmd="$cmd 1>/dev/null"
    elif [ "$verbose" = true ]; then
      [ -n "$parts[4]" ] && cmd="$parts[4]"
    fi
    print "$PREFIX $desc..."
    veval $verbose "$cmd" ||
      { print "$PREFIX Failed to complete update" && return }
  done
  print "$PREFIX Successfully updated system"
}

restore () {
  # restore to previous date in case of bad update
  # https://wiki.archlinux.org/title/Arch_Linux_Archive#How_to_restore_all_packages_to_a_specific_date
  date="$(cat "$state_dir"/last_update)"

  sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
  mirrorlistcmd="echo \"Server=https://archive.archlinux.org/repos/$(print -r -- ${date//-/\/})/\\\$repo/os/\\\$arch\" > /etc/pacman.d/mirrorlist"
  sudo sh -c "$mirrorlistcmd"
  yes | pacman -Syyuu

  sudo mv /etc/pacman.d/mirrorlist.backup /etc/pacman.d/mirrorlist
}

# error
#
# usage: error MESSAGE
#
error () {
  local __msg="${@:1}"
  print >&2 "${RED}error:$RESET $__msg"
}

# warn
#
# usage: warn MESSAGE
#
warn () {
  local __msg="${@:1}"
  print >&2 "${YELLOW}warning:$RESET $__msg"
}

# verbose print
#
# usage: vprint VERBOSE MESSAGE...
#
# Usage same as print. VERBOSE param, if taken from a variable, should be quoted
# if there is a chance it will be null. Evaluates to true even if VERBOSE is
# false. This makes it simpler to chain together with other commands, eg
#   command && vprint $v $success_msg || print $failure_msg
# where the goal is to print a success message only if verbose logging is
# enabled, but print a failure message whether verbose logging is enabled or
# not. If vprint evaluated to false when verbose is false, this functionality
# wouldn't be possible in shorthand except through something gross like
#  command && { vprint $v $success_msg || true } || print $failure_msg
# which is the exact sort of use case vprint exists to avoid.
#
vprint () {
  local __verbose="$1"
  local __msg=${@:2}
  [ "$__verbose" = true ] && [ -n "$__msg" ] && print $__msg || true
}

# verbose eval
#
# usage: veval VERBOSE? CMD...
#
# Usage same as eval (ie command may require escaping). VERBOSE param, if taken
# from a variable, should be quoted if there is a chance it will be null.
#
veval () {
  local __verbose="$1"
  local __cmd="${@:2}"
  if [ "$__verbose" = true ]; then
    [ -n "$__cmd" ] && print "$__cmd"
  fi
  eval $__cmd
}

request_root () {
  local __rootvar=${1:?"The root var must be specified."}
  eval local __root=$"$__rootvar"
  local msg=$2
  while [ -z "$__root" ]; do
    printf "$PREFIX Build package $pkg? [%]es [n]o "
    read yn
    case $yn in
      [Yy]|Yes|yes|"" )
        __root=true
        break ;;
      [Nn]|No|no )
        __root=false
        break ;;
      * ) ;;
    esac
  done
  eval $__rootvar="'$__root'"
}

files () {
  readonly local usage='TODO'
  # Always include `local OPTIND` in any function that uses `getopts` otherwise
  #   all `getopts` share a single global OPTIND
  # https://stackoverflow.com/questions/63661198/zsh-getopts-optind-behavior-not-consistent-with-other-shells-bash-sh
  local OPTIND opt
  local managed_files=()
  local prmpt=false list=false clean=false copy=false force=false verbose=false
  while [ $OPTIND -le "$#" ]; do
    if getopts :cfhlpvx opt; then
      case $opt in
        c) clean=true ;;
        f) force=true ;;
        h) print "Usage: $usage" && exit ;;
        l) list=true ;;
        p) prmpt=true ;;
        v) verbose=true ;;
        x) copy=true ;;
        \?) echo "Invalid option -$opt\nUsage: $usage" >&2 && exit 1 ;;
      esac
    elif [ -n "${(P)OPTIND}" ]; then
      managed_files+=($(eval print $"${(P)OPTIND}"))
      ((OPTIND++))
    fi
  done

  local root sudo

  if [ "$list" = true ]; then
    print "$PREFIX Files managed by $script_name $0:"
    [ -f "$file_state" ] && cat "$file_state"
    return
  fi

  if [ "$clean" = true ]; then
    print "$PREFIX Removing files managed by $script_name $0:"
    if [ -f "$file_state" ]; then
      local tmp="$(mktemp)"
      local existing_files=("${(@f)$(< "$file_state")}")

      for (( i=1 ; i<=${#existing_files[@]} ; i++ )); do
        f="$existing_files[$i]"
        printf "(%d/%d) %s\n" "$i" "${#existing_files[@]}" "$f"

        vprint $verbose "$PREFIX Backing up file before removing"
        veval $verbose cp -u --backup=numbered --parents \"$f\" \"$file_backup_dir\"

        sudo= # reset in case set by previous iterations
        if [ ! -w "$f" ] || { [ -h "$f" ] && [ ! -w "$(dirname "$f")" ] }; then
          request_root root "$PREFIX Missing write access for file, continue as root?"
          [ "$root" = true ] && sudo="sudo -E" || {
            print "$PREFIX Root access required, skipping..."
            vprint $verbose "$PREFIX Writing filename to temporary file to be preserved in state file"
            veval $verbose print \"$f\" ">>" \"$tmp\"
            continue
          }
        fi
        vprint $verbose "$PREFIX Removing file$([ -n "$sudo" ] && print " as root")"
        veval $verbose $sudo rm \"$f\" || {
          print "$PREFIX Could not remove file"
          vprint $verbose "$PREFIX Writing filename to temporary file to be preserved in state file"
          veval $verbose print \"$f\" ">>" \"$tmp\"
        }
      done
      vprint $verbose "$PREFIX Replacing state file with temporary file"
      veval $verbose mv \"$tmp\" \"$file_state\"
    fi
    exit
  fi

  # how to find symlinks referencing source:
  # $ find /home/ -type l -exec readlink -nf {} ';' -exec echo " -> {}" ';' | grep "/dir2"
  # TODO: find any files that might take precedence
  #
  # TODO: add detection for whether existing destination is NOT a symlink

  [ "$copy" = true ] && vprint $verbose "$PREFIX Copying files..." || vprint $verbose "$PREFIX Linking files..."
  [ "$force" = true ] && vprint $verbose "$PREFIX Overwriting existing files with -f"
  action=$([ "$copy" = true ] && echo 'copy' || echo 'link')

  # TODO: clean up old files from $file_state
  local src dst d filetype overwrite
  for (( i=1 ; i<=${#managed_files[@]} ; i++ )); do
    src="$(realpath -ms "$repo_dir/${managed_files[$i]%%:*}")"
    dst="$(realpath -ms "${managed_files[$i]#*:}")"
    printf "(%d/%d) %s: %s -> %s\n" \
      "$i" "${#managed_files[@]}" "$action" "$src" "$dst"

    [ -h "$dst" ] && filetype="symlink" ||
      { [ -d "$dst" ] && filetype="directory" } ||
      { [ -f "$dst" ] && filetype="file" }

    vprint $verbose "$PREFIX Comparing source to destination"
    veval $verbose cmp --silent \"$src\" \"$dst\" &&
      { { [ -h "$dst" ] && [ ! "$copy" = true ] && [ "$(readlink -f "$dst")" = "$src" ] &&
          msg="Destination is symlink to source" } ||
        { [ ! -h "$dst" ] && [ "$copy" = true ] &&
          msg="Destination and source are identical" } } &&
      { [ "$force" = true ] && vprint $verbose "$PREFIX $msg, overwriting anyway with -f" ||
        { vprint $verbose "$msg, skipping" &&
          vprint $verbose "$PREFIX Adding to state file" &&
          veval $verbose print \"$dst\" ">>" \"$file_state\" &&
          continue } }

    [ "$prmpt" = true ] &&
      while true; do
        printf "$PREFIX %s file? [y]es [N]o " $([ "$copy" = true ] && print "Copy" || print "Link")
        read yn
        case $yn in
          [Yy]|Yes|yes )
            break ;;
          [Nn]|No|no|"" )
            vprint $verbose "$PREFIX Skipping..."
            continue 2 ;;
          * ) ;;
        esac
      done

    overwrite= # reset in case set by previous iterations
    if [ -e "$dst" ] || [ -h "$dst" ]; then
      [ ! "$force" = true ] &&
        while true; do
          printf "$PREFIX Destination $filetype $(basename "$dst") exists, overwrite? [y]es [N]o [d]iff "
          read yn
          case $yn in
            [Yy]|Yes|yes )
              break ;;
            [Nn]|No|no|"" )
              vprint $verbose "$PREFIX Skipping..."
              continue 2 ;;
            [Dd]|Diff|diff )
              diff -aur --color=always "$dst" "$src"
              ;;
            * ) ;;
          esac
        done

      # TODO: figure out how to handle symlinks with copying with backups
      # -- currently copies contents into symlink
      if [ -e "$dst" ]; then
        local cmd="cp $( [ -d "$dst" ] && echo "-r" ) -u --backup=numbered --parents \"$dst\" \"$file_backup_dir\""
        vprint $verbose "$PREFIX Backing up existing $filetype before overwriting"
        veval $verbose $cmd &&
          vprint $verbose "$PREFIX Backed up $filetype to $(realpath "$file_backup_dir/$dst")" ||
          { [ "$force" = true ] &&
              vprint $verbose "$PREFIX Failed to back up $filetype, overwriting anyway with -f" ||
              while true; do
                printf "$PREFIX Failed to back up $filetype, overwrite anyway? [y]es [N]o "
                read yn
                case $yn in
                  [Yy]|Yes|yes )
                    break ;;
                  [Nn]|No|no|"" )
                    print "$PREFIX Skipping..."
                    continue 2 ;;
                  * ) ;;
                esac
              done }
        overwrite=true
      fi
    fi

    # find last element of path that already exists
    d="$dst"
    while [ ! -e "$d" ] || [ -h "$d" ]; do
      d="$(dirname "$d")"
    done

    # TODO: copy owner from file if already present, or directory if not
    # maybe not needed because files are just me / root
    #user=$(stat -c '%U' "$d")
    #group=$(stat -c '%G' "$d")

    sudo= # reset in case set by previous iterations
    if [ ! -w "$d" ]; then
      request_root root "$PREFIX Missing write access for destination $d, continue as root?"
      [ "$root" = true ] && sudo="sudo -E" ||
          { print "$PREFIX Root access required, skipping..." && continue }
    fi

    vprint $verbose "$PREFIX Making missing directories in path"
    veval $verbose $sudo mkdir -p \"$(dirname "$dst")\"
    veval $verbose "$sudo cp \"$src\" \"$dst\" \
      $( [ -h "$dst" ] && echo "--remove-destination") \
      $( [ "$overwrite" = true ] && echo "-f") \
      $( [ "$copy" = true ] || echo "-s") \
      $( [ "$verbose" = true ] || echo "2>/dev/null")" &&
      { vprint $verbose "$PREFIX Adding to state file" &&
        veval $verbose print \"$dst\" ">>" \"$file_state\" &&
        [ "$copy" = true ] &&
        vprint $verbose "$PREFIX Copied file" ||
        vprint $verbose "$PREFIX Created symbolic link" } ||
      { [ "$copy" = true ] &&
        print "$PREFIX Could not copy file" ||
        print "$PREFIX Could not create symbolic link" }
  done
  [ -f "$file_state" ] && sort -u "$file_state" -o "$file_state"
}

hosts () {
  echo "$script_name $0 not implemented" >&2
}

fstab () {
  echo "$script_name $0 not implemented" >&2
}

fstab() {
  echo "fstab not implemented" >&2
}

readonly cmd=${1:?"The command must be specified."}
prereq
case $cmd in
  init) init "${@:2}" ;;
  install) install "${@:2}" ;;
  abs) abs "${@:2}" ;;
  backup) backup "${@:2}" ;;
  update) update "${@:2}" ;;
  restore) restore "${@:2}" ;;
  files) files "${@:2}" ;;
  hosts) hosts "${@:2}" ;;
  fstab) fstab "${@:2}" ;;
  hretha) __system hretha "${@:2}" ;;
  svarog) __system svarog "${@:2}" ;;
  valhalla) __system valhalla "${@:2}" ;;
  *) echo "Invalid command $cmd" >&2
    exit 1
esac
